/* 弥散渐变背景样式 */

.bg-gradient-mesh-top{
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  background: linear-gradient(to bottom, #FFFFFF 0%, rgba(235,235,235,0.7) 50%);
  opacity: 0.9;
  filter: blur(55px);
  z-index: -1;
}

.bg-gradient-mesh {
  position: fixed;
  width: 100vw;
  height: 100vh;
  z-index: -3;
  background: linear-gradient(
    -135deg,
    rgba(239, 88, 88, 0.3) 0%,
    rgba(64, 85, 244, 0.3) 35%,
    rgba(109, 201, 244, 0.3) 63%,
    rgba(249, 240, 68, 0.3) 100%
  );
}
.bg-gradient-mesh::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 97.5%;
  height: 95%;
  transform: translate(-50%, -50%);
  background: linear-gradient(to bottom, #FFFFFF 0%, rgba(235, 235, 235, 0.7) 77%);
  filter: blur(24px) ;
  pointer-events: none;
  z-index: -2;
}

/* 色相改变动画 */
@keyframes hue-rotate-animation {
  0% {
    filter: hue-rotate(0deg);
  }
  100% {
    filter: hue-rotate(360deg);
  }
}

/* .hue-rotate-animation-slow {
  animation: hue-rotate-animation 180s linear infinite;
} */
.hue-rotate-animation-fast {
  animation: hue-rotate-animation 1s linear 2;
}

.gradient-orb {
  position: absolute;
  filter: blur(20px);
  will-change: transform, background;
}

.gradient-orb-1 {
  width: 450px;
  height: 450px;
  background: url('../../assets/images/shape1.svg') no-repeat center center;
  background-size: contain;
  z-index: -2;
  opacity: 0.55;
  animation: float-chaotic-1 180s ease-in-out infinite; 
}
.gradient-orb-2 {
  
  width: 550px;
  height: 550px;
  background: url('../../assets/images/shape2.svg') no-repeat center center;
  background-size: contain;
  animation: float-chaotic-2 180s ease-in-out infinite;
  opacity: 0.55;
  z-index: -2;
}

:root {
  --shape1-width: 450px;
  --shape1-height: 450px; 
  --shape2-width: 550px;
  --shape2-height: 550px;
}
/* 无规则移动动画 */
@keyframes float-chaotic-1 {
  0% {
    /* 左上角，元素左侧和上侧各有一半在屏幕外 */
    transform: translate(calc(var(--shape1-width) * -0.5), calc(var(--shape1-height) * -0.5));
  }
  25% {
    /* 左下角，元素左侧一半在屏幕外，底部一半在屏幕外（即元素顶部在屏幕底部中心） */
    transform: translate(calc(var(--shape1-width) * -0.5), calc(100vh - (var(--shape1-height) * 0.5)));
  }
  50% {
    /* 右下角，元素右侧一半在屏幕外，底部一半在屏幕外 */
    transform: translate(calc(100vw - (var(--shape1-width) * 0.5)), calc(100vh - (var(--shape1-height) * 0.5)));
  }
  75% {
    /* 右上角，元素右侧一半在屏幕外，顶部一半在屏幕外 */
    transform: translate(calc(100vw - (var(--shape1-width) * 0.5)), calc(var(--shape1-height) * -0.5));
  }
  100% {
    /* 回到左上角 */
    transform: translate(calc(var(--shape1-width) * -0.5), calc(var(--shape1-height) * -0.5));
  }
}

@keyframes float-chaotic-2 {
  0% {
    /* 起点：左下角。元素左侧一半在屏幕外，底部一半在屏幕外。 */
    transform: translate(calc(var(--shape2-width) * -0.5), calc(100vh - (var(--shape2-height) * 0.5)));
  }
  25% {
    /* 路径点1：右下角。元素右侧一半在屏幕外，底部一半在屏幕外。 */
    transform: translate(calc(100vw - (var(--shape2-width) * 0.5)), calc(100vh - (var(--shape2-height) * 0.5)));
  }
  50% {
    /* 路径点2：右上角。元素右侧一半在屏幕外，顶部一半在屏幕外。 */
    transform: translate(calc(100vw - (var(--shape2-width) * 0.5)), calc(var(--shape2-height) * -0.5));
  }
  75% {
    /* 路径点3：左上角。元素左侧一半在屏幕外，顶部一半在屏幕外。 */
    transform: translate(calc(var(--shape2-width) * -0.5), calc(var(--shape2-height) * -0.5));
  }
  100% {
    /* 终点：回到左下角，与起点相同。 */
    transform: translate(calc(var(--shape2-width) * -0.5), calc(100vh - (var(--shape2-height) * 0.5)));
  }
}
